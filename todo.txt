// ------------------------------------------------------------------------- //
// ---------- SOON
// ------------------------------------------------------------------------- //

- change the squares-on-the-game-area implementation to instead be a mapping with ONLY the actual squares that are in the game
    - hopefully, this fixes the severe slow-down I am seeing

- add the guts to the different game-logic JS prototypes

- have circular progress indicators around the borders of the preview windows which indicate how soon it will be before the shown block is dropped

- add the shimmer animation to the tiles
    - make this a regularly occurring thing for each entire BLOCK
	- make this a completely randomly occuring thing for each stationary SQUARE

- UNIT TESTS:
	- test for a long list of things that the browser needs to support (for each of these things, tell the player what is missing):
		- canvas
		- audio stuff...
		- transparency in CSS colors
		- 
	- add proper unit tests for classes:
		- google how to go about doing this

- brighten:
	- blocks
	- title
	- background

- make the game area size dynamically adjust with the size of the window

- move the Sprite functionality to Block and then delete the Sprite file

// ------------------------------------------------------------------------- //
// ---------- DESKTOP POST-IT NOTE
// ------------------------------------------------------------------------- //

- **** work on the phantom block polygons and the guideline polygons:
    - I should be able to use some sort of block.getConvexHull() method for both problems.
        - this might involve simply enumerating the relevant position values for each orientation/side/type?? (ugh)
- **** work on the rotation/able-to-switch-quadrants logic:
    - I need to base these rotations off of the lower-left corner
    - I need to be able to pre-compute how this rotation affects the constituent squares (so I can determine: (A) if the rotation will be valid, (B) if the quadrant switch will be valid)

- create the art which shows how the controls work:
    - for each of them, show a square with the same block on each side coming toward the center
    - then show arrows from each block:
        - inward (to drop)
        - to the sides (to move)
        - outward (to change direction)
    - show a tap circle over a single block with an arrow to its rotated version (to rotate)
        - "tap circle": a smaller circle within a larger.  both mostly transparent.  both with slight gradients.  both with borders.
    - have 2 columns for these direction images.  the first will contain the action, the second will contain the input method.
    - then, swap out the images for the input methods for those from a second set when the player toggles the "enable keyboard control" checkbox
- add the inputs for these controls
- when the game tells a block to add itself to the squares list, then also have the game check whether there are any other remaining blocks.  If not, then flip a boolean that forces the closest preview window to drop immediately on the next update().
- either switch the corner around which blocks rotate or check that they will not collide before letting the player rotate
- add SFX!!
    - google a free place
    - audible events:
        - a block falling
        - a block landing
        - game over ("GAAAAME OVEEER") (<-- record myself?)
        - a layer disintigrating
        - the level progressing
        - the game starting (a "ta dah!" sound (like opening a chest))
        - the game pausing (high to low)
        - the game unpausing (low to high)
        - a block rotating
        - a block changing direction
        - a block being dropped by the player
        - a block being moved by the player
        - a sound when the player selects a block
        - a sound when the player drags a block but hasn't yet dropped it
        - a sound when block is unable to move how the player chose

- Node.js
- Spring framework

// ------------------------------------------------------------------------- //
// ---------- EVENTUALLY
// ------------------------------------------------------------------------- //

- Time functions:
	- USE PHP to get the login/logoff/visit times that are saved for each player
	- USE JS to get the machine's local time at start and for calculating durations and whatnot
- Cookies:
	- store the username for auto-filling login info
- re-factor the Block code to only use one manner of position information
- the ability to toggle different game modes will be unlocked by getting through later levels (and this data is saved to the player's account)
- show a red or white circle or block overlay centered where the block was which caused the game over

// ------------------------------------------------------------------------- //
// ---------- PLANNING
// ------------------------------------------------------------------------- //

- ASK JUSTIN AND ALDEN FOR FEEDBACK!
    - and music (Justin's bro's band; Alden for original stuff)
	- OR, just make something easy from one of my ideas on my phone (or from long ago compositions)

- Plan the exact player input/controls for playing the game
- Think through all possible details of the game playing behavior
    - How do completed layers collapse?
- Plan the layout of the main game area, the preview windows for each side, the banner, the description below.
    - Be minimalistic!  (have content dynamically display if the player asks (taps) for it?)
- Plan the art and all small animation details
- Plan music and SFX (i.e., ask Alden when the game is demoable)
- Plan how to create accounts and log in on the screen
- Plan how to show personal history
- Plan how to show community history (how many players, high scores)
- Plan SQL database:
    - How to save player profiles (name, email, username, all score/time/actions history, devices)
	- How to save gameplays (start time, end time, tiles given (when/where/what), action history)
	- How to save current state (so the player can come back to continue later)
	- How to save login visits (which device, when opened, when closed, when went idle, ...)
- Plan unlockables/achievements:
    - When getting past certain difficulty levels (from the very start)
    - When playing quickly enough
    - New tile/GUI art
    - New music?

- say at the bottom of the info bit that the site uses cookies?

----
----
----
-- FROM GIT:
----

- Plan the exact player input/controls for playing the game
- Think through all possible details of the game playing behavior
    - How do completed layers collapse?
- Plan the layout of the main game area, the preview windows for each side, the banner, the description below.
    - Be minimalistic!  (have content dynamically display if the player asks (taps) for it?)
- Plan the art and all small animation details
- Plan music and SFX (i.e., ask Alden when the game is demoable)
- Plan how to create accounts and log in on the screen
- Plan how to show personal history
- Plan how to show community history (how many players, high scores)
- Plan SQL database:
    - How to save player profiles (name, email, username, all score/time/actions history, devices)
	- How to save gameplays (start time, end time, tiles given (when/where/what), action history)
	- How to save current state (so the player can come back to continue later)
	- How to save login visits (which device, when opened, when closed, when went idle, ...)
- Plan unlockables/achievements:
    - When getting past certain difficulty levels (from the very start)
    - When playing quickly enough
    - New tile/GUI art
    - New music?

Most of the main game logic in place:
	Tile behavior:
		Tiles of the right shape are previewed and then fall
		Tiles fall from all sides
		Tiles fall with randomized times within windows according to current difficulty
		Tiles are rendered with simple rect drawing to canvas
		Tiles fall gradually to the center
		Tiles spawn and come to rest
		Tile fall rate and spawn rate increases
		Collapse of complete layers is implemented
	player input:
		Actually capture the mouse tap and button press events on PCs and the finger tap and swipe events on mobile devices
		All player controls and actions are implemented

Tiles
Phantom line/position markings
Play area background
Surrounding area background
Borders
Create a pictoral description of how to play the game (for internationalization)
	But do also include a button in a corner with the i in a circle which represents info or more help

The code for animating all of the block behavior:
	Rotating
	Sliding both sideways and down
	Switching fall directions/sides
	Periodic "shimmers"
	Complete layer collapse disintegration effect
	Rendering of phantom lines/positions for player tile-movement events
Displaying time and current difficulty level
Miscellaneous aesthetic touches

SFX events triggered
Sound overlaying/interacting behavior figured out
Music looping behavior
Music switching behavior
Sound controls (with icons):
	Toggle music
	Toggle SFX